<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jelili O. Adesina</title><link>https://jelilio.github.io/</link><description>Recent content on Jelili O. Adesina</description><image><title>Jelili O. Adesina</title><url>https://jelilio.github.io/images/papermod-cover.png</url><link>https://jelilio.github.io/images/papermod-cover.png</link></image><generator>Hugo -- 0.119.0</generator><language>en-us</language><lastBuildDate>Tue, 12 Nov 2024 12:00:22 +0000</lastBuildDate><atom:link href="https://jelilio.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Soft Delete in Spring Webflux with R2DBC</title><link>https://jelilio.github.io/posts/soft-delete-spring-webflux-r2dbc/</link><pubDate>Tue, 12 Nov 2024 12:00:22 +0000</pubDate><guid>https://jelilio.github.io/posts/soft-delete-spring-webflux-r2dbc/</guid><description>Overview Data management is a fundamental component in software development, especially when handling records that need removal from active use. Instead of permanently deleting records (a method known as “hard delete”), many applications use a technique called “soft delete.” The “soft delete” approach is a widely used solution that marks records as inactive without permanently removing them, enabling easy data recovery and historical tracking.
Currently, unlike Spring Data JPA and Hibernate, Spring Data R2DBC does not offer built-in annotations for automatically handling soft-delete.</description></item><item><title>Internationalisation in Java</title><link>https://jelilio.github.io/posts/i18n-in-java/</link><pubDate>Sun, 28 Jul 2024 18:19:24 +0100</pubDate><guid>https://jelilio.github.io/posts/i18n-in-java/</guid><description>Overview Internationalisation (i18n) refers to designing and preparing software to be easily adapted to various languages, regions, and cultures without requiring engineering changes to the code. This is usually followed by localisation (l10n), which involves adapting the internationalised software to a specific locale, including translating the text, adjusting for local conventions, and modifying other locale-specific elements.
The goal is to make the software flexible enough to support multiple locales by separating the core logic from locale-specific elements like language and cultural conventions.</description></item><item><title>Projects</title><link>https://jelilio.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jelilio.github.io/projects/</guid><description> ZenBlog: A Simple Blog with Express and MongoDB A Spring Application using Jenkins for CI/CD JWT Authentication and Authorization with OTP using Spring WebFlux JWT Authentication and Authorization with OTP using Quarkus A Single-page Application with Express and AngularJs An Online Code Editor using React Compiler API: exposes Websocket channel to accept source code and return the compiled output i18n-resource-bundle: A Java library for implementing internationalisation i18n-quarkus-extension: A Quarkus extension for implementing internationalisation Smart Home Security System with Raspberry Pi and OpenCV</description></item></channel></rss>