<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>programming on Jelili O. Adesina</title><link>https://jelilio.github.io/categories/programming/</link><description>Recent content in programming on Jelili O. Adesina</description><image><title>Jelili O. Adesina</title><url>https://jelilio.github.io/images/papermod-cover.png</url><link>https://jelilio.github.io/images/papermod-cover.png</link></image><generator>Hugo -- 0.119.0</generator><language>en-us</language><lastBuildDate>Sun, 28 Jul 2024 18:19:24 +0100</lastBuildDate><atom:link href="https://jelilio.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Internationalisation in Java</title><link>https://jelilio.github.io/posts/i18n-in-java/</link><pubDate>Sun, 28 Jul 2024 18:19:24 +0100</pubDate><guid>https://jelilio.github.io/posts/i18n-in-java/</guid><description>Overview Internationalisation (i18n) refers to designing and preparing software to be easily adapted to various languages, regions, and cultures without requiring engineering changes to the code. This is usually followed by localisation (l10n), which involves adapting the internationalised software to a specific locale, including translating the text, adjusting for local conventions, and modifying other locale-specific elements.
The goal is to make the software flexible enough to support multiple locales by separating the core logic from locale-specific elements like language and cultural conventions.</description></item></channel></rss>